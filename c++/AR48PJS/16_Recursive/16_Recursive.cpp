// 16_Recursive.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int arr[5] = { 5,7,1,2,3 };

void kfc(int _a)
{
	if (_a == 4)
	{
		return;
	}
	std::cout << _a;
	kfc(_a + 1);
	std::cout << _a;
}

int main()
{
	kfc(0);

	//1. 종료 조건에 대해서 훈련을 해야한다.

    // 중급자 프로그래머를 나누는 기준
    // 재귀함수를 활용할수 있는지 

    // 재귀함수를 배워야 하는이유
    // 추상적인 내용(게임같은 장르)를 
    // 코드로 옮긴다고 과정했을때 제일 복잡한 독해력 / 활용력 등등이 필요하다.
    // 제일 배우기 어렵고 활용하기 어렵다.
    // 요걸 우리가 만약에 정복을 한다면?
    // 자신감이 하늘을 찌르게 된다. 
    // 배열을 순회할떄는 -> 반복문 (for)
    // list -> 반복문
    // 그래프, 트리를 순회하기 위해서는 필수적이다.

    // C언어

    // 자료구조 / 알고리즘
    // 배열, 리스트 , 스택 ,큐 3분의2정도 내용
    // 트리, 그래프 활용 과제나 게임을만든다거나 하면 ( 코딩테스트 )



    // 재귀 함수
    // 추상적 ( 뭔가 확실하게 눈에 보이지 않는다.)
    // 일반적인 함수를 호출했을때랑 전혀 다른점이 없다.

    // 재귀함수를 어려워하는 이유 ( 단점 )
    // 1. 코드자체만보고 동작이 어떤 방식으로 이루어지고 있는지
    //    파악이 되지 않는다. 그래서 잘 사용을 하지 않는다.


    // 2. 잘못 사용할 경우 스택공간이 넘쳐흘러서 강제 종료된다. ( 두려움 )

    // 3. 배워서 활용할수 있는 실력을 기르는데 시간이 오래 걸린다 ( for문 -> 2주, 재귀 -> 2달 )


    // 재귀함수를 사용하면 좋은 이유
    // 1. 가독성이 너무좋아진다.
    // 2. 경우의수를 해결할때 재귀함수를 사용하게 되면 굉장히 편리하다. ( 느릴수 있다 )
    // 








    return 0;
}

